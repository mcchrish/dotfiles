local cmp = require "cmp"

local kind_icons = {
	Class = "‚¨¢",
	Color = "‚ùÅ",
	Constant = "œÄ",
	Constructor = "‚¨°",
	Enum = "‚ò∑",
	EnumMember = "‚ò∑",
	Event = "‚§∏",
	Field = "‚óß",
	File = "‚üî",
	Folder = "‚ß∏",
	Function = "Œª",
	Interface = "‚ñ°",
	Keyword = "·¥ã",
	Method = "Œª",
	Module = "‚ñ†",
	Operator = "√∑",
	Property = "‚ãØ",
	Reference = "‚Üí",
	Snippet = "‚ó∏",
	Struct = "‚ñ£",
	Text = "·¥Ä",
	TypeParameter = "·¥õ",
	Unit = "‚ê£",
	Value = "üûá",
	Variable = "ùë£",
}

cmp.setup {
	formatting = {
		format = function(entry, vim_item)
			-- Kind icons
			vim_item.kind = string.format("%s %s", kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind
			-- Source
			vim_item.menu = ({
				buffer = "[Buffer]",
				nvim_lsp = "[LSP]",
				luasnip = "[LuaSnip]",
				nvim_lua = "[Lua]",
				latex_symbols = "[LaTeX]",
			})[entry.source.name]
			return vim_item
		end,
	},
	window = {
		-- completion = cmp.config.window.bordered(),
		-- documentation = cmp.config.window.bordered(),
	},
	snippet = {
		expand = function(args)
			require("luasnip").lsp_expand(args.body)
		end,
	},
	mapping = cmp.mapping.preset.insert {
		["<C-b>"] = cmp.mapping.scroll_docs(-4),
		["<C-f>"] = cmp.mapping.scroll_docs(4),
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.abort(),
		["<CR>"] = cmp.mapping.confirm { select = true }, -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
	},
	sources = cmp.config.sources({
		{ name = "nvim_lsp" },
		{ name = "luasnip" },
	}, {
		{ name = "buffer" },
	}),
}
